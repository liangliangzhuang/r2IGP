[{"path":"https://liangliangzhuang.github.io/r2IGP/articles/sim-ana.html","id":"parameter-setting","dir":"Articles","previous_headings":"","what":"Parameter Setting","title":"Simulation data analysis","text":"","code":"# Define simulation parameters n <- 10       # Number of products m <- 40       # Number of observation times types <- \"pp\" # Type of degradation model (pp: power x power) alpha <- c(1.2, 0.8)  beta <- c(4, 1)      kappa <- 5            sigma2 <- 0.1        # Variance for noise  # Define time scale t <- 0:m # Define degradation path for each product (same time scale for all products) t_list <- rep(list(t), n) r <- c(0, rrIG(length(t) - 1, 10, 1)) u <- cumsum(r * diff(t)[1]) # usage scale u_list <- rep(list(u), n)  # List for each product's usage scale  # Define random effects for each product gamma <- rnorm(n, kappa, sqrt(sigma2))  # All parameters para <- c(alpha[1], beta[1], alpha[2], beta[2], kappa, sigma2)"},{"path":"https://liangliangzhuang.github.io/r2IGP/articles/sim-ana.html","id":"simulate-data","dir":"Articles","previous_headings":"","what":"Simulate Data","title":"Simulation data analysis","text":"function sim.dat.path() simulates degradation data using different models. available models : \"M0\", \"M1\", \"M2\", \"M3\", \"M4\". model structures detailed related publications. degradation paths can visualized. left plot shows effects two scales product degradation, right plot shows final observed degradation data.","code":"# Simulate data for model \"M0\" sim_dat <- sim.dat.path(    model = \"M0\",     type = types,     m = m,     n = n,     t = t_list,     u = u_list,     par = para,     gamma = gamma ) # Visualize degradation paths path_re <- degradation.path.plot.summary(   model = \"M0\",   data = list(sim_dat$Y_t, sim_dat$X_t, sim_dat$Z_t),   t = t, u = u ) # Display the plots cowplot::plot_grid(plotlist = path_re) # path.3D.plot(model=\"M0\", units = 10, time = t, cycles = u, loss = sim_dat$Y_t)"},{"path":[]},{"path":"https://liangliangzhuang.github.io/r2IGP/articles/sim-ana.html","id":"initial-values","dir":"Articles","previous_headings":"Statistical Inference","what":"Initial Values","title":"Simulation data analysis","text":"use Gauss-Legendre Quadrature method (gaussian_legendre_integral()) approximating E-step integration. methods like Trapezoidal Approximation (trapezoidal_integral()) Monte Carlo Integration (mc_integral()) also available. initialize parameters different models based parameter structures perform EM algorithm.","code":"# Define initial parameter values for different models init_params_seq <- list(   \"M0\" = rep(1, 6), \"M1\" = rep(1, 5),   \"M2\" = rep(1, 6), \"M3\" = rep(1, 4),   \"M4\" = rep(1, 3) )  # Set model sequence model_seq <- c(\"M0\", \"M1\", \"M2\", \"M3\", \"M4\")  # Parameter settings max_iter <- 5      # Maximum number of EM iterations tol1 <- 10^-4       # Tolerance level gl_point <- 30      # Number of points for Gauss-Legendre method approx.method <- \"gl\" # Use Gauss-Legendre Quadrature method  # Initial parameter setup for each model u_seq <- list(u_list, u_list, u_list, NULL, NULL, NULL, NULL) # M0,M1,M2,M3t,M3u,M4t,M4u t_seq <- list(t_list, t_list, t_list, t_list, u_list, t_list, u_list) # Define initial guesses for each model init_params_seq <- list(   \"M0\" = rep(1, 6), \"M1\" = rep(1, 5),    \"M2\" = rep(1, 6), \"M3\" = rep(1, 4),    \"M3\" = rep(1, 4), \"M4\" = rep(1, 3),    \"M4\" = rep(1, 3))  model_seq <- c(\"M0\", \"M1\", \"M2\", \"M3\", \"M3\", \"M4\", \"M4\")"},{"path":"https://liangliangzhuang.github.io/r2IGP/articles/sim-ana.html","id":"em-computation","dir":"Articles","previous_headings":"Statistical Inference","what":"EM Computation","title":"Simulation data analysis","text":"section performs parameter estimation different models using Expectation-Maximization (EM) algorithm. model, initial parameter values generated via init.guess() function. EM algorithm applied using EM() function, Gauss-Legendre Quadrature method (gaussian_legendre_integral()) E-step integration. models M6 M7, optim() function used maximum likelihood estimation. results stored em_para_re, errors occur estimation, handled tryCatch(), ensuring process continues even models fail converge. Note: Since large number iterations EM algorithm requires certain amount time, 50 used example (actually converged yet). Readers welcome modify according needs.","code":"data_store <- data_detail <- em_para <- em_iter_list <- inti_par <- list() em_para_re <- vector(\"list\", length(model_seq))  for (q in 1:length(model_seq)) {   inti_par[[q]] <- init.guess(     model = model_seq[q], types, data = sim_dat$diff_Y,     t_list = t_seq[[q]], u_list = u_seq[[q]],     init_param = init_params_seq[[q]]   )   if (q %in% c(6, 7)) {     em_para_re[[q]] <- tryCatch(       optim(inti_par[[q]], M4.loglik,         types = types, t_list = t_seq[[q]],         data = sim_dat$diff_Y       )$par,       error = function(e) rep(NA, 3)     )   } else {     em_para[[q]] <- tryCatch(       EM(         data = sim_dat$diff_Y, par0 = inti_par[[q]], types = types,         tol1 = tol1, max_iter = max_iter,         t_list = t_seq[[q]], u_list = u_seq[[q]], model = model_seq[q], n_points = gl_point,         approx.method = approx.method       ),       error = function(e) NA     )     em_para_re[[q]] <- if (any(is.na(em_para[[q]]))) rep(NA, length(init_params_seq[[q]])) else as.numeric(em_para[[q]]$par_re[em_para[[q]]$iter, ])   } }"},{"path":"https://liangliangzhuang.github.io/r2IGP/articles/sim-ana.html","id":"log-likelihood-and-aic-calculation","dir":"Articles","previous_headings":"Statistical Inference","what":"Log-Likelihood and AIC Calculation","title":"Simulation data analysis","text":"Log-likelihood AIC calculated model comparison.","code":"loglik <- as.numeric() for (q in 1:length(model_seq)) {   loglik[q] <- round(     Log.liklihod(       model = model_seq[q],        est_par = em_para_re[[q]],        data = sim_dat$diff_Y,        t_list = t_seq[[q]],        u_list = u_seq[[q]],        types = types       ),      3) } # AIC computation aic <- 2 * length(sapply(em_para_re, length)) - 2 * loglik which.min(aic) #> [1] 6"},{"path":"https://liangliangzhuang.github.io/r2IGP/articles/sim-ana.html","id":"final-results","dir":"Articles","previous_headings":"Statistical Inference","what":"Final Results","title":"Simulation data analysis","text":"final estimated parameters, log-likelihood, AIC values presented summarized table.","code":"# Store and display final results sim_para <- data.frame(   \"M0\" = append(em_para_re[[1]], NA, after = 4),   \"M1\" = append(em_para_re[[2]], rep(NA, 2), after = 5),   \"M2\" = append(em_para_re[[3]], NA, after = 4),   \"M3t\" = append(em_para_re[[5]], rep(NA, 3), after = 2),   \"M3u\" = c(rep(NA, 2), append(em_para_re[[4]], rep(NA, 1), after = 2)),   \"M4t\" = c(append(em_para_re[[6]], rep(NA, 2), after = 2), rep(NA, 2)),   \"M4u\" = c(rep(NA, 2), em_para_re[[7]], rep(NA, 2)) ) final_sim_para <- data.frame(t(rbind(sim_para, loglik, aic))) final_sim_para[7] <- sqrt(final_sim_para[7]) colnames(final_sim_para) <- c(\"alpha_t\", \"beta_t\", \"alpha_u\",                               \"beta_u\", \"gamma\", \"kappa\",                                \"sigma\", \"Loglik\", \"AIC\")  # Display the table kableExtra::kable(round(final_sim_para, 3))"},{"path":"https://liangliangzhuang.github.io/r2IGP/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Liangliang Zhuang. Author, maintainer.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhuang L (2025). r2IGP: Reliability Analysis Degradation Modeling Using Two-Scale Reparameterized Inverse Gaussian Processes. R package version 0.1.0, https://liangliangzhuang.github.io/r2IGP/.","code":"@Manual{,   title = {r2IGP: Reliability Analysis and Degradation Modeling Using Two-Scale Reparameterized Inverse Gaussian Processes},   author = {Liangliang Zhuang},   year = {2025},   note = {R package version 0.1.0},   url = {https://liangliangzhuang.github.io/r2IGP/}, }"},{"path":[]},{"path":"https://liangliangzhuang.github.io/r2IGP/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Reliability Analysis and Degradation Modeling Using Two-Scale Reparameterized Inverse Gaussian Processes","text":"r2IGP package designed provide engineers researchers powerful tool reliability analysis degradation modeling, particularly using Two-Scale Reparameterized Inverse Gaussian Processes. package offers variety features, including: Data Simulation: Generate simulated data follows Two-Scale Reparameterized Inverse Gaussian Process, ideal reliability analysis degradation modeling. Degradation Path Visualization: Allows users visually display degradation paths, aiding analysis understanding process. Statistical Inference: Provides methods statistical inference across different models estimate reliability degradation characteristics data. Reliability Analysis: Conduct -depth reliability analysis engineering systems components, supporting wide range engineering applications.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Reliability Analysis and Degradation Modeling Using Two-Scale Reparameterized Inverse Gaussian Processes","text":"can install development version r2IGP GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"liangliangzhuang/r2IGP\")"},{"path":"https://liangliangzhuang.github.io/r2IGP/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get started","title":"Reliability Analysis and Degradation Modeling Using Two-Scale Reparameterized Inverse Gaussian Processes","text":"mainly includes following functions: rIG Distribution: random number generation, density function, distribution generation rIG distribution implemented rrIG(), drIG(), prIG(), respectively. Simulation: function sim.dat.path() simulates set degradation models, associated subfunctions including Lambda_cum(), Lambda_fun(), Lambda_fun_der(). Statistical Inference Models: Statistical inference five models using EM algorithm MLE implemented EM(). Relevant subfunctions include: E-step Integration: E_z() function performs E-step integration, using three approximation methods due lack closed-form solution: Trapezoidal Approximation: trapezoidal_integral(). Monte Carlo Integration: mc_integral(). Gauss-Legendre Quadrature: gaussian_legendre_integral(). functions likelihood evaluation include f_uz_given_D_gaussian(), Log.likelihood(), M4.loglik(), Integrand_fun(), init.log.likelihood(). Interval estimation: Interval estimates models computed using bootstrap methods CI_Bootstrap(), support parallel computing accelerate execution. Plotting: Contains various visualization functions, primarily displaying degradation paths EM iteration progress. Notable functions include path.3D.plot(), fit.path.plot(), degradation.path.plot.summary(), EM_iter_plot(). Miscellaneous: Others functions contain selected_fun() save.result().","code":"library(r2IGP)"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Approx.integration.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate Integration Method Selector — Approx.integration","title":"Approximate Integration Method Selector — Approx.integration","text":"function selects appropriate integration method (Monte Carlo, Trapezoidal, Gaussian-Legendre) based user's input calls corresponding function compute integral.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Approx.integration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate Integration Method Selector — Approx.integration","text":"","code":"Approx.integration(   method,   period,   y_tilde,   v_tilde,   tau_tilde,   n_samples = NULL,   n_intervals = NULL,   n_points = NULL,   epsilon = NULL )"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Approx.integration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate Integration Method Selector — Approx.integration","text":"method Character, integration method use (\"mc\", \"ti\", \"gl\"). period Numeric vector, integration interval. y_tilde Numeric, parameter exponential function integrand. v_tilde Numeric, parameter exponential function integrand. tau_tilde Numeric, parameter exponential function integrand. n_samples Integer, number samples Monte Carlo integration (`method` \"mc\"). n_intervals Integer, number intervals Trapezoidal integration (`method` \"ti\"). n_points Integer, number points Gaussian-Legendre integration (`method` \"gl\"). epsilon Numeric, small value Trapezoidal integration (`method` \"ti\").","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Approx.integration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate Integration Method Selector — Approx.integration","text":"result selected integration method.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/CI_Bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Confidence Interval for Model Parameters — CI_Bootstrap","title":"Bootstrap Confidence Interval for Model Parameters — CI_Bootstrap","text":"function applies bootstrap method generate set simulated samples, estimates model parameters sample using EM algorithm (MLE), calculates confidence intervals parameters.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/CI_Bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Confidence Interval for Model Parameters — CI_Bootstrap","text":"","code":"CI_Bootstrap(   it = 100,   final_par,   model,   core,   types,   n,   m,   init_param,   period = c(0, 1),   t_list,   u_list,   alpha_value = 0.05,   tol1,   max_iter,   parallel = TRUE,   n_points,   n_samples,   n_intervals,   show_progress = FALSE,   approx.method )"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/CI_Bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Confidence Interval for Model Parameters — CI_Bootstrap","text":"Integer, number bootstrap iterations (default 100). final_par Numeric vector, final estimated parameters model. model Character string, model type, one \"M0\", \"M1\", \"M2\", \"M3\", \"M4\". core Integer, number cores use parallel computation. types Character string, type data (e.g., \"type1\", \"type2\", etc.). n Number units. m Number time. init_param Numeric vector, initial parameters EM algorithm. period Numeric vector, time interval analysis, default `c(0, 1)`. t_list Numeric vector, time points. u_list Numeric vector, cycle points. alpha_value Numeric, significance level confidence interval, default 0.05. tol1 Numeric, tolerance convergence EM algorithm. max_iter Integer, maximum number iterations EM algorithm. parallel Logical, whether use parallel computation, default `TRUE`. n_points Integer, number points used computation. n_samples Integer, number samples use computation. n_intervals Integer, number intervals used computation. show_progress Logical, whether display computation progress, default `FALSE`. approx.method Character string, approximation method use.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/CI_Bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Confidence Interval for Model Parameters — CI_Bootstrap","text":"list containing two elements:   - `confidence_intervals`: data frame containing estimates, standard errors, lower upper bounds confidence intervals.   - `BT_para`: matrix containing parameter estimates bootstrap iteration.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/EM.html","id":null,"dir":"Reference","previous_headings":"","what":"EM Algorithm: Expectation-Maximization (EM) Algorithm — EM","title":"EM Algorithm: Expectation-Maximization (EM) Algorithm — EM","text":"function implements Expectation-Maximization (EM) algorithm, iteratively optimizes model parameters alternating E-step (Expectation step) M-step (Maximization step). algorithm used parameter estimation latent variable models, different model types like \"M0\", \"M1\", \"M2\", \"M3\".","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/EM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EM Algorithm: Expectation-Maximization (EM) Algorithm — EM","text":"","code":"EM(   data,   par0,   types,   tol1 = 0.001,   max_iter,   t_list,   u_list,   model,   n_points = n_points,   n_samples = 100,   n_intervals = NULL,   approx.method,   period = c(0, 1),   show_progress = TRUE )"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/EM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EM Algorithm: Expectation-Maximization (EM) Algorithm — EM","text":"data Numeric matrix size `m x n`, `m` number samples `n` number variables. par0 Numeric vector initial model parameters. types Character vector specifying model types variable. tol1 Numeric value, tolerance convergence. algorithm stops parameter change threshold. max_iter Integer, maximum number iterations EM algorithm. t_list List, contains `t` values variable (used Lambda calculations). u_list List, contains `u` values variable (used Lambda calculations). model Character, model type (\"M0\", \"M1\", \"M2\", \"M3\", etc.) used estimation. n_points Integer, number points Gaussian-Legendre integration. n_samples Integer, number random samples Monte Carlo integration. n_intervals Integer, number intervals Trapezoidal integration. approx.method Character, specifies numerical method approximating expectation (\"gl\" Gaussian-Legendre, \"mc\" Monte Carlo, \"ti\" Trapezoidal). period Numeric vector length 2, defining integration limits (e.g., `c(0,1)`). show_progress Logical, TRUE, shows progress bar iterations.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/EM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EM Algorithm: Expectation-Maximization (EM) Algorithm — EM","text":"list containing:   - `par_re`: matrix estimated parameters final iteration.   - `iter`: number iterations performed.   - `mse_all`: mean squared error parameter estimates consecutive iterations, used convergence criterion.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/EM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"EM Algorithm: Expectation-Maximization (EM) Algorithm — EM","text":"E-step calculates expected values latent variables, M-step updates model parameters based expectations. function also supports different numerical methods approximating expectations (e.g., Monte Carlo, Trapezoidal, Gaussian-Legendre methods).","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/EM_iter_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting EM Algorithm Iteration Results — EM_iter_plot","title":"Plotting EM Algorithm Iteration Results — EM_iter_plot","text":"function generates plot showing parameter estimates course EM algorithm's iterations. plot visualizes convergence parameter final estimate. true values parameters provided, shown dashed lines plot comparison.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/EM_iter_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting EM Algorithm Iteration Results — EM_iter_plot","text":"","code":"EM_iter_plot(em_par, par, ncol = 4, ture_value = TRUE, orders, f_names)"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/EM_iter_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting EM Algorithm Iteration Results — EM_iter_plot","text":"em_par list data frame containing EM algorithm's iteration results. Specifically, include estimated parameters (`par_re`), rows representing iterations columns representing parameters. par vector true parameter values (optional) plotted horizontal dashed lines comparison. ncol Integer specifying number columns facet grid layout. plot display parameter facet. ture_value Logical value (`TRUE` `FALSE`). `TRUE`, true parameter values plotted dashed horizontal lines. `FALSE`, true values shown. orders vector parameter names desired order facets. f_names vector labels used parameter facetting plot.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/EM_iter_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting EM Algorithm Iteration Results — EM_iter_plot","text":"`ggplot` object containing plot EM iteration results.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/EM_iter_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting EM Algorithm Iteration Results — EM_iter_plot","text":"function uses `ggplot2` create line plot parameter estimates (`par_re`) iteration, optional comparison true parameter values (`par`). data reshaped using `pivot_longer` easier plotting, function provides customization options plot's appearance.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/E_z.html","id":null,"dir":"Reference","previous_headings":"","what":"EM Algorithm: Expectation Step (E-step) — E_z","title":"EM Algorithm: Expectation Step (E-step) — E_z","text":"function calculates posterior distribution latent variables computes expected values different model configurations. approximates expectations using methods like Gaussian-Legendre (GL), Monte Carlo (MC), Trapezoidal (TI) methods.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/E_z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EM Algorithm: Expectation Step (E-step) — E_z","text":"","code":"E_z(   serial,   model,   method = \"gl\",   period = c(0, 1),   par1,   gamma_par = c(2, 0.1),   data,   n_samples = NULL,   n_intervals = NULL,   n_points = NULL )"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/E_z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EM Algorithm: Expectation Step (E-step) — E_z","text":"serial Integer, specifies expected value calculate (e.g., 1 6). model Character, specifies model type (\"M0\", \"M1\", \"M2\", etc.). method Character, specifies numerical method approximation (\"gl\", \"mc\", \"ti\"). period Numeric vector length 2, defines integration limits (e.g., `c(0, 1)`). par1 List, model parameters variable. Includes `delta_Lambda` `delta_Lambda0`. gamma_par Numeric vector, parameters gamma distribution, used specific models (e.g., `c(2, 0.1)`). data Matrix, observed data rows represent samples columns represent variables. n_samples Integer, number random samples Monte Carlo integration. Default NULL. n_intervals Integer, number intervals Trapezoidal integration. Default NULL. n_points Integer, number points Gaussian-Legendre integration. Default NULL.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/E_z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EM Algorithm: Expectation Step (E-step) — E_z","text":"Numeric matrix, expected values latent variables based provided `serial` `model`.         result varies depending type expectation (e.g., posterior mean, variance, etc.).","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Integrand_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrand Function for the Gaussian-Legendre Integral — Integrand_fun","title":"Integrand Function for the Gaussian-Legendre Integral — Integrand_fun","text":"function defines integrand Gaussian-Legendre integration method. calculates product two parts: 1. power function \\( u_ij \\), 2. exponential function involving `y_tilde`, `v_tilde`, `tau_tilde`.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Integrand_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrand Function for the Gaussian-Legendre Integral — Integrand_fun","text":"","code":"Integrand_fun(u_ij, y_tilde, v_tilde, tau_tilde)"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Integrand_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integrand Function for the Gaussian-Legendre Integral — Integrand_fun","text":"u_ij Numeric, sample value integration variable. y_tilde Numeric, parameter exponential function. v_tilde Numeric, parameter exponential function. tau_tilde Numeric, parameter exponential function.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Integrand_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integrand Function for the Gaussian-Legendre Integral — Integrand_fun","text":"value integrand given `u_ij`.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Lambda_cum.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative Lambda Calculation — Lambda_cum","title":"Cumulative Lambda Calculation — Lambda_cum","text":"Computes cumulative Lambda values based input parameters model type.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Lambda_cum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative Lambda Calculation — Lambda_cum","text":"","code":"Lambda_cum(par, type, t, u)"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Lambda_cum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative Lambda Calculation — Lambda_cum","text":"par vector containing parameters. type string specifying model type (e.g., \"pp\"). t Time vector. u Another variable vector (optional).","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Lambda_cum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative Lambda Calculation — Lambda_cum","text":"list containing cumulative Lambda values time another variable.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Lambda_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Lambda Function Calculation — Lambda_fun","title":"Lambda Function Calculation — Lambda_fun","text":"Calculates different Lambda values given parameters type.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Lambda_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lambda Function Calculation — Lambda_fun","text":"","code":"Lambda_fun(type, par0, t, u)"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Lambda_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lambda Function Calculation — Lambda_fun","text":"type character string specifying type Lambda function (e.g., \"pp\"). par0 vector four parameters: alpha_t, beta_t, alpha_u, beta_u. t Numeric vector representing time values. u Numeric vector representing another variable (e.g., units cycles).","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Lambda_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lambda Function Calculation — Lambda_fun","text":"list containing Lambda_t, Lambda_u, time values.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Lambda_fun_der.html","id":null,"dir":"Reference","previous_headings":"","what":"Lambda Function Derivative Calculation — Lambda_fun_der","title":"Lambda Function Derivative Calculation — Lambda_fun_der","text":"Computes derivatives Lambda functions respect model parameters.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Lambda_fun_der.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lambda Function Derivative Calculation — Lambda_fun_der","text":"","code":"Lambda_fun_der(type, model, par0, t, u)"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Lambda_fun_der.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lambda Function Derivative Calculation — Lambda_fun_der","text":"type model type (e.g., \"M0\"). model specific model differentiation. par0 vector model parameters. t Time vector. u Another variable (e.g., cycles units).","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Lambda_fun_der.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lambda Function Derivative Calculation — Lambda_fun_der","text":"list containing derivatives Lambda functions time another variable.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Log.liklihod.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Log-Likelihood for Various Models — Log.liklihod","title":"Compute Log-Likelihood for Various Models — Log.liklihod","text":"function calculates log-likelihood different models, including \"M0\", \"M1\", \"M2\", \"M3\", \"M4\". log-likelihood computed based provided data estimated parameters. function supports different likelihood formulas model type, models depend different parameters kappa, sigma2, gamma, others.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Log.liklihod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Log-Likelihood for Various Models — Log.liklihod","text":"","code":"Log.liklihod(   model = model,   est_par = em_para_re[[q]],   data = coat_dat$diff_Y,   t_list = t_list,   u_list = u_list,   types = types )"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Log.liklihod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Log-Likelihood for Various Models — Log.liklihod","text":"model string indicating model type. can one \"M0\", \"M1\", \"M2\", \"M3\", \"M4\". est_par vector estimated parameters. include parameters like kappa, sigma2, others specific model. data matrix data frame size m x n, m number observations n number series. column represents time series. t_list list time points (relevant sequence) series, passed `Lambda_fun`. u_list list values corresponding parameter series, passed `Lambda_fun`. types vector specifying types categories series, used `Lambda_fun` function.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/Log.liklihod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Log-Likelihood for Various Models — Log.liklihod","text":"computed log-likelihood specified model, single numeric value.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/M4.loglik.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Log-Likelihood for the M4 Model — M4.loglik","title":"Compute Log-Likelihood for the M4 Model — M4.loglik","text":"function computes log-likelihood specified model (M4 model) using provided parameter estimates (`hat_para`) data (`data`). log-likelihood calculated based statistical model data point assumed follow specific distribution defined `Lambda_fun` function, related parameter estimates.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/M4.loglik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Log-Likelihood for the M4 Model — M4.loglik","text":"","code":"M4.loglik(hat_para, types, data = sim_dat$diff_Y_t, t_list = t_list)"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/M4.loglik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Log-Likelihood for the M4 Model — M4.loglik","text":"hat_para vector parameter estimates. first two elements correspond initial parameters used `Lambda_fun`, third element corresponds another model parameter involved likelihood computation. types vector specifying types categories associated series, passed `Lambda_fun` function calculating time-varying function. data matrix data frame containing data points series. Rows correspond observations, columns represent different time series. t_list list time points (relevant sequence) series, passed `Lambda_fun` time-specific calculations.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/M4.loglik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Log-Likelihood for the M4 Model — M4.loglik","text":"numeric value representing negative log-likelihood data specified model. function   returns negative value facilitate optimization (minimization).","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/M4.loglik.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Log-Likelihood for the M4 Model — M4.loglik","text":"log-likelihood calculated iterating data column computing contribution log-likelihood based given parameters likelihood function time series.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/degradation.path.plot.summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Degradation Path Plot Summary This function generates the degradation path plot based on different lambda functions for time and cycles. — degradation.path.plot.summary","title":"Degradation Path Plot Summary This function generates the degradation path plot based on different lambda functions for time and cycles. — degradation.path.plot.summary","text":"Degradation Path Plot Summary function generates degradation path plot based different lambda functions time cycles.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/degradation.path.plot.summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degradation Path Plot Summary This function generates the degradation path plot based on different lambda functions for time and cycles. — degradation.path.plot.summary","text":"","code":"degradation.path.plot.summary(   data = sim_dat$diff_Y_t,   model,   t = t,   u = NULL,   leg.pos = \"none\" )"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/degradation.path.plot.summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Degradation Path Plot Summary This function generates the degradation path plot based on different lambda functions for time and cycles. — degradation.path.plot.summary","text":"data List degradation data. model Character string specifying model type (e.g., \"M0\", \"M1\", etc.). t Numeric vector time. u Numeric vector units cycles. leg.pos Character string legend position. Default \"none\".","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/degradation.path.plot.summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Degradation Path Plot Summary This function generates the degradation path plot based on different lambda functions for time and cycles. — degradation.path.plot.summary","text":"list ggplot objects.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/drIG.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability Density Function of the Reparameterized Inverse Gaussian (drIG) — drIG","title":"Probability Density Function of the Reparameterized Inverse Gaussian (drIG) — drIG","text":"Computes probability density function (PDF) reparameterized inverse Gaussian distribution.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/drIG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability Density Function of the Reparameterized Inverse Gaussian (drIG) — drIG","text":"","code":"drIG(n1, lambda1, gamma1)"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/drIG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability Density Function of the Reparameterized Inverse Gaussian (drIG) — drIG","text":"n1 Numeric vector values evaluate PDF . lambda1 Shape parameter. gamma1 Scale parameter.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/drIG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability Density Function of the Reparameterized Inverse Gaussian (drIG) — drIG","text":"numeric vector PDF values.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/f_uz_given_D_gaussian.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Function for f(u_ij | D) — f_uz_given_D_gaussian","title":"Estimate Function for f(u_ij | D) — f_uz_given_D_gaussian","text":"function computes ratio \\( f(u_ij | D) \\), \\( f(u_ij | D) \\) likelihood given value \\( u_ij \\) conditioned observed data.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/f_uz_given_D_gaussian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Function for f(u_ij | D) — f_uz_given_D_gaussian","text":"","code":"f_uz_given_D_gaussian(   u_ij,   method = \"gl\",   period = c(0, 1),   y_tilde,   v_tilde,   tau_tilde,   n_samples = NULL,   n_intervals = NULL,   n_points = 30 )"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/f_uz_given_D_gaussian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Function for f(u_ij | D) — f_uz_given_D_gaussian","text":"u_ij Numeric, integration variable. method Character, integration method use (\"mc\", \"ti\", \"gl\"). period Numeric vector, integration period. y_tilde Numeric, parameter exponential function integrand. v_tilde Numeric, parameter exponential function integrand. tau_tilde Numeric, parameter exponential function integrand. n_samples Integer, number samples Monte Carlo integration. n_intervals Integer, number intervals Trapezoidal integration. n_points Integer, number points Gaussian-Legendre integration.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/f_uz_given_D_gaussian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Function for f(u_ij | D) — f_uz_given_D_gaussian","text":"likelihood estimate \\( f(u_ij | D) \\).","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/fit.path.plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Fitted Path with or without Confidence Intervals — fit.path.plot","title":"Plot Fitted Path with or without Confidence Intervals — fit.path.plot","text":"function generates plot fitted degradation paths unit, option display confidence intervals based quantiles. function supports models \"M0\", \"M1\", \"M2\" allows customized plotting.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/fit.path.plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Fitted Path with or without Confidence Intervals — fit.path.plot","text":"","code":"fit.path.plot(   dat,   True_Y,   t_list,   u_list,   select_ID,   types,   ci = TRUE,   scope = NULL )"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/fit.path.plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Fitted Path with or without Confidence Intervals — fit.path.plot","text":"dat numeric matrix containing estimated parameters product. True_Y tibble data frame containing true observed values, columns `TIME`, `UV`, `observed`. t_list list time values product. u_list list covariate values product (can NULL). select_ID vector product IDs plot. types vector specifying type model used Lambda calculation. ci logical value indicating whether include confidence intervals plot (default TRUE). scope numeric vector length 2 specifying quantile range confidence intervals (e.g., `c(0.025, 0.975)`).","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/fit.path.plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Fitted Path with or without Confidence Intervals — fit.path.plot","text":"ggplot object representing fitted degradation paths selected product units.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/fit.path.process.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Fitted Path for Each Product — fit.path.process","title":"Compute Fitted Path for Each Product — fit.path.process","text":"function calculates fitted degradation values product unit based estimated parameters using Lambda function. function assumes two scales, computing cumulative fitted degradation values unit.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/fit.path.process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Fitted Path for Each Product — fit.path.process","text":"","code":"fit.path.process(dat, select_ID, t_list, u_list, types)"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/fit.path.process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Fitted Path for Each Product — fit.path.process","text":"dat numeric vector estimated parameters (including Lambda values) product. select_ID vector product IDs select fitted path calculation. t_list list element contains time points product. u_list list element contains covariates product. types vector specifying type model used Lambda calculation.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/fit.path.process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Fitted Path for Each Product — fit.path.process","text":"tibble containing fitted degradation values (`Y`) product unit time.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/gaussian_legendre_integral.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian-Legendre Integration — gaussian_legendre_integral","title":"Gaussian-Legendre Integration — gaussian_legendre_integral","text":"function estimates integral using Gaussian-Legendre quadrature method. uses Legendre polynomial roots weights compute integral given interval.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/gaussian_legendre_integral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian-Legendre Integration — gaussian_legendre_integral","text":"","code":"gaussian_legendre_integral(   period = c(0, 1),   y_tilde,   v_tilde,   tau_tilde,   n_points = 10 )"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/gaussian_legendre_integral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gaussian-Legendre Integration — gaussian_legendre_integral","text":"period Numeric vector, integration interval, default `c(0, 1)`. y_tilde Numeric, parameter exponential function integrand. v_tilde Numeric, parameter exponential function integrand. tau_tilde Numeric, parameter exponential function integrand. n_points Integer, number Gaussian points use integration.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/gaussian_legendre_integral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gaussian-Legendre Integration — gaussian_legendre_integral","text":"list containing:   - `integral_estimate`: Estimated integral using Gaussian-Legendre quadrature.   - `time_avg`: Time taken perform calculation.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/init.guess.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial Parameter Guess Using Optimization — init.guess","title":"Initial Parameter Guess Using Optimization — init.guess","text":"function estimates initial parameter values different models using optimization techniques. function uses `optim` function L-BFGS-B method, supports parameter bounds. calculates initial parameter estimates models \"M0\", \"M1\", \"M2\", \"M3\", \"M4\".","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/init.guess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial Parameter Guess Using Optimization — init.guess","text":"","code":"init.guess(   model,   types,   data = sim_dat$diff_Y_t,   t_list,   u_list,   init_param = rep(1, 3) )"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/init.guess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial Parameter Guess Using Optimization — init.guess","text":"model character string specifying model type. Must one \"M0\", \"M1\", \"M2\", \"M3\", \"M4\". types vector specifying type distribution model lambda calculation. data numeric matrix columns representing data product. t_list list vectors, vector contains time covariates product. u_list list vectors, vector contains additional covariates product (can NULL). init_param numeric vector containing initial parameter guesses. Default vector 1's length 3 5.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/init.guess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initial Parameter Guess Using Optimization — init.guess","text":"numeric vector containing initial parameter estimates given model.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/init.log.likelihood.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial Log-Likelihood Calculation — init.log.likelihood","title":"Initial Log-Likelihood Calculation — init.log.likelihood","text":"function computes log-likelihood given set parameters different models. models \"M0\", \"M1\", \"M2\" involve gamma lambda terms, models \"M3\" \"M4\" involve lambda. function calculates log-likelihood based observed data.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/init.log.likelihood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial Log-Likelihood Calculation — init.log.likelihood","text":"","code":"init.log.likelihood(   params = rep(1, 5),   model,   type1,   data1 = sim_dat$diff_Y_t[, 1],   t = t,   u = NULL )"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/init.log.likelihood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial Log-Likelihood Calculation — init.log.likelihood","text":"params numeric vector containing initial values parameters. vector length 5 models \"M0\", \"M1\", \"M2\", length 3 models \"M3\" \"M4\". model character string specifying model type. Must one \"M0\", \"M1\", \"M2\", \"M3\", \"M4\". type1 string specifying type distribution model lambda calculation. data1 numeric vector containing observed data single product (response variable). t numeric vector time covariates used lambda function. u numeric vector additional covariates lambda function (can NULL models).","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/init.log.likelihood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initial Log-Likelihood Calculation — init.log.likelihood","text":"numeric value representing negative log-likelihood given parameters.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/mc_integral.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Integration — mc_integral","title":"Monte Carlo Integration — mc_integral","text":"function estimates integral using Monte Carlo method. randomly samples `u_ij` values uniform distribution computes mean integrand values samples.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/mc_integral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Integration — mc_integral","text":"","code":"mc_integral(period = c(0, 1), n_samples, y_tilde, v_tilde, tau_tilde)"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/mc_integral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Integration — mc_integral","text":"period Numeric vector, integration interval, default `c(0, 1)`. n_samples Integer, number samples use Monte Carlo integration. y_tilde Numeric, parameter exponential function integrand. v_tilde Numeric, parameter exponential function integrand. tau_tilde Numeric, parameter exponential function integrand.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/mc_integral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Integration — mc_integral","text":"list containing:   - `integral_estimate`: Estimated integral using Monte Carlo.   - `time_avg`: Time taken perform calculation.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/move_infinite.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Remove Rows Containing Infinite Values or Exceeding Thresholds — move_infinite","title":"Function to Remove Rows Containing Infinite Values or Exceeding Thresholds — move_infinite","text":"function applies `selected_fun` row data frame filter rows contain infinite values exceed threshold. used clean data analysis.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/move_infinite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Remove Rows Containing Infinite Values or Exceeding Thresholds — move_infinite","text":"","code":"move_infinite(df)"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/move_infinite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Remove Rows Containing Infinite Values or Exceeding Thresholds — move_infinite","text":"df data frame matrix rows filtered.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/move_infinite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Remove Rows Containing Infinite Values or Exceeding Thresholds — move_infinite","text":"data frame matrix rows meet conditions removed.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/path.3D.plot.html","id":null,"dir":"Reference","previous_headings":"","what":"3D Path Plot of Degradation Loss — path.3D.plot","title":"3D Path Plot of Degradation Loss — path.3D.plot","text":"Creates 3D plot visualize degradation loss different units across time cycles.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/path.3D.plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3D Path Plot of Degradation Loss — path.3D.plot","text":"","code":"path.3D.plot(model, units = 10, time = t, cycles = u, loss = sim_dat$Y_t)"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/path.3D.plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3D Path Plot of Degradation Loss — path.3D.plot","text":"model Character string specifying model type (e.g., \"M0\", \"M1\", \"M2\"). units Integer specifying number units plot. time Numeric vector representing time data. cycles Numeric vector representing cycle data. loss Matrix loss values, typically `sim_dat$Y_t`.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/path.3D.plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"3D Path Plot of Degradation Loss — path.3D.plot","text":"3D plot using `plot_ly`.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/performence.compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Compute Performance Metrics (RB, MSE, RRMSE, CP, LEN) — performence.compare","title":"Function to Compute Performance Metrics (RB, MSE, RRMSE, CP, LEN) — performence.compare","text":"function computes several performance metrics comparing estimated parameters (`final_par`) true parameter values (`true_value`). calculates relative bias (RB), mean squared error (MSE), relative mean squared error (re_MSE), coverage probability (CP), length confidence interval (LEN).","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/performence.compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Compute Performance Metrics (RB, MSE, RRMSE, CP, LEN) — performence.compare","text":"","code":"performence.compare(   true_value = para,   final_par = c(em_para_re, inti_par, bayes_para_re),   interval_re = NULL )"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/performence.compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Compute Performance Metrics (RB, MSE, RRMSE, CP, LEN) — performence.compare","text":"true_value numeric vector true parameter values. final_par numeric vector matrix containing estimated parameters. interval_re data frame containing confidence interval bounds (Lower, Upper) parameters. Default NULL.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/performence.compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Compute Performance Metrics (RB, MSE, RRMSE, CP, LEN) — performence.compare","text":"list containing computed values RB, MSE, re_MSE, CP, LEN.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/prIG.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative Distribution Function of the Reparameterized Inverse Gaussian (prIG) — prIG","title":"Cumulative Distribution Function of the Reparameterized Inverse Gaussian (prIG) — prIG","text":"Computes cumulative distribution function (CDF) reparameterized inverse Gaussian distribution.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/prIG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative Distribution Function of the Reparameterized Inverse Gaussian (prIG) — prIG","text":"","code":"prIG(p, lambda1, gamma1)"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/prIG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative Distribution Function of the Reparameterized Inverse Gaussian (prIG) — prIG","text":"p Numeric vector probabilities evaluate CDF . lambda1 Shape parameter. gamma1 Scale parameter.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/prIG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative Distribution Function of the Reparameterized Inverse Gaussian (prIG) — prIG","text":"numeric vector CDF values.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/rrIG.html","id":null,"dir":"Reference","previous_headings":"","what":"Reparameterized Inverse Gaussian Random Number Generator (rIG) — rrIG","title":"Reparameterized Inverse Gaussian Random Number Generator (rIG) — rrIG","text":"Generates random samples reparameterized inverse Gaussian distribution.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/rrIG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reparameterized Inverse Gaussian Random Number Generator (rIG) — rrIG","text":"","code":"rrIG(n1, lambda1, gamma1)"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/rrIG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reparameterized Inverse Gaussian Random Number Generator (rIG) — rrIG","text":"n1 Number random samples. lambda1 Shape parameter distribution. gamma1 Scale parameter distribution.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/rrIG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reparameterized Inverse Gaussian Random Number Generator (rIG) — rrIG","text":"numeric vector random samples.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/save.result.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Save Simulation Results — save.result","title":"Function to Save Simulation Results — save.result","text":"function processes saves results simulation, calculating summary statistics relative bias (RB), root mean squared error (RMSE), relative RMSE (RRMSE), coverage probability (CP), confidence interval length (LEN). results saved list data frames corresponding different statistics.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/save.result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Save Simulation Results — save.result","text":"","code":"save.result(   mttf_re = mttf_re,   sim_re = sim_re,   MTTF = TRUE,   col_names = c(\"alpha_t\", \"beta_t\", \"alpha_u\", \"beta_u\", \"kappa\", \"sigma2\") )"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/save.result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Save Simulation Results — save.result","text":"mttf_re list containing results MTTF simulations. sim_re list containing simulation results keys RB, MSE, re_MSE, etc. MTTF Logical, indicating whether compute MTTF statistics. Default TRUE. col_names character vector containing column names results. Default includes \"alpha_t\", \"beta_t\", \"alpha_u\", \"beta_u\", \"kappa\", \"sigma2\".","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/save.result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Save Simulation Results — save.result","text":"list data frames containing calculated statistics.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/selected_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Filter Rows Based on Criteria — selected_fun","title":"Function to Filter Rows Based on Criteria — selected_fun","text":"function used filter rows contain infinite values values greater threshold. checks whether columns set FALSE EM_scen, Bayes_scen, interval_scen, also whether row contains infinite values values exceeding 1000.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/selected_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Filter Rows Based on Criteria — selected_fun","text":"","code":"selected_fun(row)"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/selected_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Filter Rows Based on Criteria — selected_fun","text":"row numeric vector representing single row data.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/selected_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Filter Rows Based on Criteria — selected_fun","text":"logical value: TRUE row kept, FALSE otherwise.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/sim.dat.path.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Degradation Data — sim.dat.path","title":"Simulate Degradation Data — sim.dat.path","text":"Simulates degradation path data based specified model parameters.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/sim.dat.path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Degradation Data — sim.dat.path","text":"","code":"sim.dat.path(model = \"M0\", type, m, n, t, u, par, gamma = 1)"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/sim.dat.path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Degradation Data — sim.dat.path","text":"model character string specifying model type (e.g., \"M0\", \"M1\", etc.). type type Lambda function (e.g., \"pp\"). m number steps units. n number samples simulations. t Time vector. u second variable (optional). par vector parameters model. gamma Scale parameter (optional, defaults 1).","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/sim.dat.path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Degradation Data — sim.dat.path","text":"list containing simulated degradation paths different models.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/trapezoidal_integral.html","id":null,"dir":"Reference","previous_headings":"","what":"Trapezoidal Rule Integration — trapezoidal_integral","title":"Trapezoidal Rule Integration — trapezoidal_integral","text":"function estimates integral using trapezoidal rule. creates set evenly spaced `u_ij` values computes average integrand boundaries intermediate points.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/trapezoidal_integral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trapezoidal Rule Integration — trapezoidal_integral","text":"","code":"trapezoidal_integral(   period = c(0, 1),   y_tilde,   v_tilde,   tau_tilde,   n_intervals = 1000,   epsilon = 1e-06 )"},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/trapezoidal_integral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trapezoidal Rule Integration — trapezoidal_integral","text":"period Numeric vector, integration interval, default `c(0, 1)`. y_tilde Numeric, parameter exponential function integrand. v_tilde Numeric, parameter exponential function integrand. tau_tilde Numeric, parameter exponential function integrand. n_intervals Integer, number intervals trapezoidal rule. epsilon Numeric, small value avoid sampling boundaries (0 1).","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/reference/trapezoidal_integral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trapezoidal Rule Integration — trapezoidal_integral","text":"list containing:   - `integral_estimate`: Estimated integral using trapezoidal rule.   - `time_avg`: Time taken perform calculation.","code":""},{"path":"https://liangliangzhuang.github.io/r2IGP/news/index.html","id":"r2igp-010","dir":"Changelog","previous_headings":"","what":"r2IGP 0.1.0","title":"r2IGP 0.1.0","text":"Initial CRAN submission.","code":""}]
